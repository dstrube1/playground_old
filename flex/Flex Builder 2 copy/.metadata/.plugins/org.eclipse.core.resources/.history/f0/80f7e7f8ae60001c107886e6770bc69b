package lenz.main.site_select
{
	import app.App;
	
	import base.lenz.BaseLenz;
	import base.lenz.Lenz;
	import base.lenz.panel.LenzPanel;
	import base.lenz.panel.PanelBuilder;
	
	import lenz.main.site_select.panel.SiteSelectionPanel;
	import lenz.main.site_select.panel.CA_CountryRegionSelectionPanel;
	import lenz.main.site_select.panel.CA_MetricWeightingPanel;
	import lenz.main.site_select.panel.CA_NewProposalBuilderPanel;
	import lenz.main.site_select.panel.CA_ProposalBrowserPanel;
	import lenz.main.site_select.panel.CA_SequenceBrowserPanel;
	import lenz.main.site_select.panel.CA_SequenceCloseupPanel;
	import lenz.main.site_select.panel.CA_SequenceCloseup2Panel;
	import lenz.main.site_select.panel.CA_SequenceCloseup3Panel;
	import lenz.main.site_select.panel.InvestigatorFinderPanel;
	import lenz.main.site_select.panel.InvestigatorFinder2Panel;
	import lenz.main.site_select.panel.InvestigatorIdentifierPanel;
	import lenz.main.site_select.panel.InvestigatorIdentifier2Panel;
	import lenz.main.site_select.panel.InvestigatorIdentifier3Panel;
	
	import mx.controls.Alert; 
	
	import base.controller.ClickManager;
	import lenz.main.study_mgr.StudyManagerLenz;
	import lenz.main.site_select.model.StudyProposal;
	import base.db.MemDB;
	import lenz.main.site_select.panel.original.SiteSelectLenzPanel;
	import base.services.MapArray;
	import lenz.main.site_select.panel.CA_ScenarioCommittedPanel;
	import base.Context;
	import base.model.ViewContext;
	import base.util.ModalWait;
	import mx.core.Container;
	 
	public class SiteSelectionLenz extends BaseLenz implements Lenz 
	{
		public static const LENZ_ID:String = App.SITE_SELECT;

        
		private var siteSelectionPanel:LenzPanel = null;
		public var proposalBrowserPanel:LenzPanel = null;
		private var newProposalBuilderPanel:LenzPanel = null;
		public var sequenceBrowserPanel:LenzPanel = null;
		public var countryRegionSelectionPanel:LenzPanel = null;
		private var metricWeightingPanel:LenzPanel = null;
		public var sequenceCloseupPanel:LenzPanel = null;
		public var sequenceCloseup2Panel:LenzPanel = null;
		public var sequenceCloseup3Panel:LenzPanel = null;
		private var investigatorFinderPanel:LenzPanel = null;
		private var investigatorFinder2Panel:LenzPanel = null;
		private var investigatorIdentifierPanel:LenzPanel = null; 
		private var investigatorIdentifier2Panel:LenzPanel = null;
		private var investigatorIdentifier3Panel:LenzPanel = null;
		private var scenarioCommittedPanel:LenzPanel = null;
		public var newScenarioName:String = null;
		
		public var proposal:StudyProposal = null;
		public var projections:MemDB = null;
		public var countryScores:MemDB = null;
		
/*		
		private var protoPanel:LenzPanel = null;
		private var idealPanel:LenzPanel = null;
		private var sitePanel:LenzPanel = null;
		private var finalPanel:LenzPanel = null;
*/		
		
		public function SiteSelectionLenz():void {			
			
			super();
			
			lenzCreationComplete();
			
			
		}
		
		public function destroy(panel:LenzPanel):LenzPanel {
			/*
			if( panel != null ){											
				panel.destroy();
			} 
			return null;
			*/
			return panel;
		}
		
		public override function getLenzId():String {
			return LENZ_ID;
		}
		
		
		public override function activate():void {
			
			siteSelectionPanel = PanelBuilder.build( SiteSelectionPanel, this);
			
			setPanel(siteSelectionPanel);
			
			super.activate();
			
		}
		
		public override function fetchInitialData(handler:Function):void {
			
			handler();
			
		}
		
		public function simulateExternalClick( data:String, params:Object=null ):void {
			
			//ModalWait.start();
			var tmp:LenzPanel = null;
			//var dataArr:MapArray = null;
			
			
		
			
			if(params) {
			    try {
				    var context:Context = this.getVisualContext();
					var vcontext:ViewContext = context.getViewContext();
				    vcontext.setObject(data,params);
				}
				catch (terr:TypeError)
				{
				 //  Alert.show("T Exception!"  + terr.toString());
				
				}
				catch (err:ReferenceError)
				{
				 //  Alert.show("Exception!"  + err.toString());
				}
			  	
			} 
			
			if (data == ""){
				siteSelectionPanel = destroy(siteSelectionPanel);
				if (siteSelectionPanel == null) {
					siteSelectionPanel = PanelBuilder.build( SiteSelectionPanel, this);
				}
				
				tmp = siteSelectionPanel;
				
			} else if (data == "ProposalBrowser") {
				proposalBrowserPanel = destroy(proposalBrowserPanel);
				
				if (proposalBrowserPanel == null) {
					proposalBrowserPanel = PanelBuilder.build( CA_ProposalBrowserPanel, this);
				}
				//clear the previous selected study proposal
				this.proposal = null;
				
				tmp = proposalBrowserPanel;
				
			} else if (data == "NewProposal") {
				newProposalBuilderPanel = destroy(newProposalBuilderPanel);
				
				if (newProposalBuilderPanel == null) {
					newProposalBuilderPanel = PanelBuilder.build( CA_NewProposalBuilderPanel, this);
				}
				//clear the previous selected study proposal
				this.proposal = null;
				tmp = newProposalBuilderPanel;
				
			} else if (data == "UpdateProposal") {
				newProposalBuilderPanel = destroy(newProposalBuilderPanel);
				
				if (newProposalBuilderPanel == null) {
					newProposalBuilderPanel = PanelBuilder.build( CA_NewProposalBuilderPanel, this);
				}
				
				tmp = newProposalBuilderPanel;				
				
			} else if (data == "SequenceBrowser") {
				sequenceBrowserPanel = destroy(sequenceBrowserPanel);
				
				if (sequenceBrowserPanel == null) {
					sequenceBrowserPanel = PanelBuilder.build( CA_SequenceBrowserPanel, this);
				}
				
				tmp = sequenceBrowserPanel;
				
			} else if (data == "CountrySelection") {
				countryRegionSelectionPanel = destroy(countryRegionSelectionPanel);
				if (countryRegionSelectionPanel == null) {
					countryRegionSelectionPanel = PanelBuilder.build( CA_CountryRegionSelectionPanel, this);
				}
				
				tmp = countryRegionSelectionPanel;
				
			} else if (data == "Metrics") {
				metricWeightingPanel = destroy(metricWeightingPanel);
				//append scenario name to proposal and then display this form
				if (metricWeightingPanel == null) {
					metricWeightingPanel = PanelBuilder.build( CA_MetricWeightingPanel, this);
				}				
				
				tmp = metricWeightingPanel;
				
			} else if (data == "SequenceCloseup") {
				sequenceCloseupPanel = destroy(sequenceCloseupPanel);
				if (sequenceCloseupPanel == null) {
					sequenceCloseupPanel = PanelBuilder.build( CA_SequenceCloseupPanel, this);
				}
				
				tmp = sequenceCloseupPanel;
				
			} else if (data == "SequenceCloseup2") {
				sequenceCloseup2Panel = destroy(sequenceCloseup2Panel);
				if (sequenceCloseup2Panel == null) {
					sequenceCloseup2Panel = PanelBuilder.build( CA_SequenceCloseup2Panel, this);
				}
				
				tmp = sequenceCloseup2Panel;
				
		
			}  else if (data == "SequenceCloseup3") {
				sequenceCloseup3Panel = destroy(sequenceCloseup3Panel);
				if (sequenceCloseup3Panel == null) {
					sequenceCloseup3Panel = PanelBuilder.build( CA_SequenceCloseup3Panel, this);
				}
				
				tmp = sequenceCloseup3Panel;
				
		
			} else if (data == "InvestigatorFinder"){
				investigatorFinderPanel = destroy(investigatorFinderPanel);
				if (investigatorFinderPanel == null){
					investigatorFinderPanel = PanelBuilder.build( InvestigatorFinderPanel, this);
				}
				
				tmp = investigatorFinderPanel;

			} else if (data == "InvestigatorFinder2"){
				investigatorFinder2Panel = destroy(investigatorFinder2Panel);
				if (investigatorFinder2Panel == null){
					investigatorFinder2Panel = PanelBuilder.build( InvestigatorFinder2Panel, this);
				}
				
				tmp = investigatorFinder2Panel;
			} else if (data == "InvestigatorIdentifier"){
				investigatorIdentifierPanel = destroy(investigatorIdentifierPanel);
				if (investigatorIdentifierPanel == null){
					investigatorIdentifierPanel = PanelBuilder.build( InvestigatorIdentifierPanel, this);
				}

				tmp = investigatorIdentifierPanel;

			} else if (data == "InvestigatorIdentifier2"){
				investigatorIdentifier2Panel = destroy(investigatorIdentifier2Panel);
				if (investigatorIdentifier2Panel == null){
					investigatorIdentifier2Panel = PanelBuilder.build( InvestigatorIdentifier2Panel, this);
				}

				tmp = investigatorIdentifier2Panel;

			} else if (data == "InvestigatorIdentifier3"){
				investigatorIdentifier3Panel = destroy(investigatorIdentifier3Panel);
				if (investigatorIdentifier3Panel == null){
					investigatorIdentifier3Panel = PanelBuilder.build( InvestigatorIdentifier3Panel, this);
				}

				tmp = investigatorIdentifier3Panel;

			} else if (data == "ScenarioCommitted") {
				scenarioCommittedPanel = destroy(scenarioCommittedPanel);
				if (scenarioCommittedPanel == null) {
					scenarioCommittedPanel = PanelBuilder.build( CA_ScenarioCommittedPanel, this );
				}
				
				tmp = scenarioCommittedPanel;

			}else {
				Alert.show("Unknown data request:  "+data);
				
				tmp = proposalBrowserPanel;
			}
			
			
			
				
			if (tmp.getCurrentForm() != null) {
				// Seems to only happen after the panel is created already 
				tmp.getCurrentForm().populateResources(params);
			}

			// close the current panel, and tell the system what to do when the current panel is closed.
			// Assuming this is related to the display of another form, you would want to set this up to
			// wait for data from the server, set up the form within the new panel with the appropriate data
			// and then 

			currentPanel.close( 
			
				function():void{ 
					setPanel(tmp); 
					tmp.open(); 
				} 
				
				
			);


		}

		//temporary kludge;
		//better = make SiteSelectionClickManager, like the StudyClickManager as referenced in StudyManagerLenz.as
		/*override public function getClickManager():ClickManager {
			var smLenz:StudyManagerLenz = new StudyManagerLenz();
			return smLenz.getClickManager();
		}*/
	}
}