package app
{
	import app.config.LenzFactory;
	import app.server.LenzServer;
	import app.server.mock.MockLenzService;
	import app.server.mock.impl.MockGetViewService;
	
	import base.lenz.panel.PanelBuilder;
	import base.log.LogWindow;
	import base.log.Logger;
	import base.services.LenzService;
	import base.services.RichLenzService;
	import base.services.ServiceBuilder;
	import base.services.SimpleLenzService;
	
	import lenz.login.LoginLenz;
	import lenz.main.investigator.InvestigatorLenz;
	import lenz.main.monitor.MonitorLenz;
	import lenz.main.site_select.SiteSelectionLenz;
	import lenz.main.study_mgr.StudyManagerLenz;
	import lenz.main.welcome.WelcomeLenz;
	
	import mx.core.ClassFactory;
	import app.server.mock.impl.MockGetStudyOverviewService;

	
	public class Init
	{
		
		private var config:Object = null;

		
		
		
		public function Init( logWin:LogWindow, configParams:Object):void {
			
			config = configParams;
			
			// all the configuration for the base code goes here, or in sub methods of this.
			initLogger(logWin);
			
			registerLenzes();
			
			configPanelBuilder();
						
		}
		
		
		public function phase2( ):void {
			configureServer( config );
			
			
		}
		
		
		private function initLogger(logWin:LogWindow):void {
							
			Logger.initialize(logWin.getTextArea()); 
			
		}
		
		
		private function registerLenzes():void {
			
			LenzFactory.registerLenz( App.SITE_SELECT, SiteSelectionLenz);
			LenzFactory.registerLenz( App.STUDY_MANAGER, StudyManagerLenz);
			LenzFactory.registerLenz( LoginLenz.LENZ_ID, LoginLenz);
			LenzFactory.registerLenz( WelcomeLenz.LENZ_ID, WelcomeLenz);
			LenzFactory.registerLenz( App.MONITOR, MonitorLenz);
			LenzFactory.registerLenz( App.INVESTIGATOR, InvestigatorLenz);
			
			
		}
		
		
		
		
		private function configPanelBuilder():void {
			
			PanelBuilder.setContentHeight(App.LENZ_PANEL_CONTENT_HEIGHT);
			
		}
		
		
		
		
		private function configureServer( config:Object ):void {
			
			var url:String = config["svcUrl"];
			var wsdlPath:String = config["wsdlPath"];
			var portPath:String = config["portPath"];

			var baseService:LenzService = null;			
			var visibleService:LenzService = null;

			if (config["testMode"]) {

				baseService = new MockLenzService();


				var notificationXML:XML = <db>
				   			  <notification id="100" type="alarm" priority="1" text="Significant Enrollment Problem" area="recruiting" region="NA" country="USA" monitor="J100" site="XFG11" />
				  			  <notification id="101" type="alert" priority="2" text="Monitor Falling Behind" area="deliverables"  region="NA" country="USA" monitor="J100" site="XFG11" />
							  <notification id="102" type="notification" priority="3" text="Missing Paperwork" area="quality" region="NA" country="USA" monitor="J100" site="XFG11" />
						</db>
						
				var notificationDetailsXML:XML = <db>
								<notification type="alarm" name="Monitor Falling Behind" description="Description of Monitor Falling Behind" />
							</db>
							
				var plansXML:XML = <db>
								<plan id="1" name="Plan1" description="Hold a Rejuvenation Meeting" />
								<plan id="2" name="Plan2" description="Add more monitors" />
							</db>

				
				var getViewSvc:MockGetViewService = (baseService as MockLenzService).getResourceHandler("getView") as MockGetViewService;
			
				setGetViewMockResponses(getViewSvc, notificationXML, notificationDetailsXML, plansXML);
				
				
				var getStudyOverviewSvc:MockGetStudyOverviewService = (baseService as MockLenzService).getResourceHandler("getStudyOverview") as MockGetStudyOverviewService;
				setGetStudyOverviewMockResponses(  getStudyOverviewSvc, notificationXML );
				
				
			} else {
				
				var builder:ServiceBuilder = new ServiceBuilder();
				
				builder.setUrl(url);
				builder.setWsdlPath(wsdlPath);
				builder.setPortPath(portPath);
				baseService = new SimpleLenzService();
				
				builder.build( baseService );
				
				
			}
			
			
			visibleService = new RichLenzService(baseService );
			
			LenzServer.init(visibleService);
						
			
		}
		
	}
}