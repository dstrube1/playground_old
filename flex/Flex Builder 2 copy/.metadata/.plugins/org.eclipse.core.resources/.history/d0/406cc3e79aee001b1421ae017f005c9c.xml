<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas  xmlns:mx="http://www.adobe.com/2006/mxml" 
	height="1000" width="700"  
	styleName="lenzFrame" 
	creationComplete="onCreationComplete()"
	xmlns:base.lenz.panel="base.lenz.panel.*">
	
	<mx:Metadata>
		[DefaultProperty("subComponents")]
	</mx:Metadata>
	
	<mx:Number id="frameThickness" />
	<mx:String id="title" />

	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.containers.Panel;
			import base.lenz.panel.ReflectPanel;
			import flash.utils.setTimeout;

			import base.event.LenzInitializedEvent;
			import base.lenz.Lenz;
			import base.lenz.frame.LenzFrame;
			import base.event.PanelReadyEvent;
			import base.log.Logger;
			import base.lenz.panel.LenzPanel;
			import base.log.LogWindow;


			// public properties
		    public var logwindow:LogWindow = null;


		     
			protected var logger:Logger = Logger.getLogger('BaseLenzFrame');

			
			
			// 
			protected var currentLenz:Lenz = null;
			protected var currentPanel:LenzPanel = null;

			
			/*
				@SMELL - we have two functions that do the
				same thing.
			*/
			public function getCurrentLenz() :Lenz {
				return currentLenz;
			}

			public function getTitle():String {
				return title;
			}
	
	
			public function getFrameComponent():DisplayObject {
				return this;
			}
			
			
			
			public function getLenz():Lenz {
				return(currentLenz);
			}
			
	
	
			public function getPanel():LenzPanel {
				return(currentPanel);
			}
	
			public function setPanel( panel:LenzPanel):void {
				
				logger.debug(title+" Setting currentPanel to :"+panel.getTitle());
				
				lenzRoot.removeAllChildren();
				lenzRoot.addChild(panel.getPanelComponent());
				currentPanel = panel;   



				//	panel.activate();
			}
	
	
	
	
	
			public function schedule( closure:Function, delay:Number, rest:Array):void {
				
				logger.debug("Scheduling "+closure+" to run in "+delay+" ms");
				
				setTimeout(closure, delay, rest);				
			}
	
		
	
	

	
	
/*	
	
	
			public function changePanel( panel:LenzPanel):void {
				
				if (getCurrentPanel() != null) {
					getCurrentPanel().exposePanel = false;
				}			
	
				setCurrentPanel(panel);
	
				panel.exposePanel = true;
				
			}
			
			
			public function set exposePanel( hint:Boolean):void {
	
				if (_currentPanel != null) {
					if (hint) {
						_currentPanel.exposePanel = true;				
					} else  {
						_currentPanel.exposePanel = false;
					}
				}
				
			}
			
			public function get exposePanel():Boolean {
				return false;
			}
*/



			/*
				BUG in Flex - for the moment, I can't get this to work properly as a protected
				method in all cases.  TBD
			*/
			public function onFrameCreationComplete():void {
				
				//throw Error("must override this method in "+title+" with your own implementation");
				
			}



			//-----------  subclassable ------------------------
			
			




			//----------- private implementation --------------------


		     private var _components:Array;
		     
		     
		     
		     
		     
		     


			public function set activate(b:Boolean):void {
				
				if (b) {
					
					currentLenz.initialize();
					
				} else {
					
					// unregister all of our event listeners (TBD)
					
					currentLenz.close();
				}
				
				
				activateFrame();
				
			}
			
			
			public function get activate():Boolean {
				
				return currentLenz != null;
				
			}






			/* protected function addListeners():void {
				
				addEventListener(LenzInitializedEvent.EVENT_CODE, onLenzInitializedEvent);
				logger.debug("Added listener for "+LenzInitializedEvent.EVENT_CODE);
				
				addEventListener(PanelReadyEvent.EVENT_CODE, onPanelReadyEvent);
				logger.debug("Added listener for "+PanelReadyEvent.EVENT_CODE);
				
				
			} */



			/* protected function onLenzInitializedEvent(ev:LenzInitializedEvent):void {
				
				logger.debug(" onLenzInitialized: "+ev.getLenz());
				
				// once the lenz is initialized, we can tell it to activate.
				
				if (ev.getLenz() != currentLenz.getLenzId()) {
					throw new Error("Mismatching lenzes - event lenze is : "+ev.getLenz()+", expecting "+currentLenz.getLenzId()+"... possibly we did not close the frame properly?");
				}
				
				
				// now we fetch the initial data for the lenz, and if we have a progress timer running, we stop it.
				//
				currentLenz.fetchInitialData( function():void { currentLenz.activate(); } );
				

				
				// currentLenz.activate();
				
				
				
			} */

/* 
			protected function onPanelReadyEvent(ev:PanelReadyEvent):void {
				
				currentLenz.onPanelReadyEvent(ev);
				
			} */






		     private function onCreationComplete():void {
		     	
		     	logger.debug("BaseLenzFrame: onCreationComplete");
		     	
		     	updateReflectPanel();
		     	
		     	addComponents();
		     	
		     	addListeners();
		     	
				onFrameCreationComplete();
		     	
		     }



			protected function activateFrame():void {
				// do nothing.
			}



/*			 
			 private function onPanelReadyEvent(ev:PanelReadyEvent):void {
			 	
				logger.debug(title+" received onPanelReadyEvent for: "+ev.getLenz());			 	
			 	
			 	if (getCurrentPanel() != null) {
					getCurrentPanel().exposePanel = true;
				} else {
					logger.debug("Current panel is null");
				}

			 }
*/
		     
		     
		     
		     private function set subComponents( a:Array ) : void
	    	 {
	        	 _components = a;
	     	 }
	     	 
		     private function addComponents() : void 
		     {
		          lenzRoot.removeAllChildren();
		          
		          if (_components != null) {
			          for(var i:int=0; i < _components.length; i++) {
			               lenzRoot.addChild( _components[i] );
			          }
			      }
		     }
			
			private function updateReflectPanel():void{
				//var reflectPanel:ReflectPanel = new ReflectPanel();
				
				/*
				reflectPanel.height = 40;
				reflectPanel.width = 800;
				reflectPanel.y = 590;
				reflectPanel.x = 100;
				reflectPanel.alpha=1.0;//0.5;
				*/
								
				//Why update and not add? Because using this line:
				//reflectPanel.fillColors=[];
				//gives this error:
				//Access of possibly undefined property fillColors through a reference 
				//with static type base.lenz.panel:ReflectPanel.	:
				
				//addChild(reflectPanel);
				
			}

		
		]]>
	</mx:Script>
<!--
1- 
<mx:Image id="aim" source="@Embed(source='/resources/images/lenz_border_guide_tabs.jpg')" />
2-
<mx:Image id="aim" source="@Embed(source='/resources/images/lenz_border_guide.jpg')" />
3- 
<mx:Image id="aim" source="@Embed(source='/resources/images/lenz_guide_center.jpg')" />
-->
	<mx:Canvas styleName="lenzCanvas" id="lenzRoot" x="{frameThickness+1}" y="{frameThickness-1}" 
		height="{height - frameThickness*2}"
		width="{width - frameThickness*2}">



	</mx:Canvas>

	<!--
	<base.lenz.panel:ReflectPanel id="reflectPanel"
		fillColors="[#444444, #444444]"
		>
	</base.lenz.panel:ReflectPanel>
	-->
		

	<base.lenz.panel:ReflectPanel id="reflectPanel"	x="130" y="560" height="150" width="763" alpha="1.0">
	</base.lenz.panel:ReflectPanel>
		
    <!--
	this didn't work the way I expected, trying another way
	<pl.log:Debug id="debug_win" height="400" width="400" visible="false" />
	-->

	<mx:Text text="{title}" x="100" y="10"  fontSize="20" color="#cccccc" fontSharpness="-400" 
		click="logwindow.visible=!logwindow.visible"/>
	<mx:TextArea x="67" y="10" borderStyle="none" backgroundAlpha="0.0" height="30" width="186" 
		id="titleBox" editable="false" enabled="true" click="logwindow.visible=!logwindow.visible"/>

	
	
	
	
</mx:Canvas>
