<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	height="768"
	width="1024"
	xmlns:app.frame="app.frame.*"
	xmlns:app.config="app.config.*"
	currentState="Initial"
	initialize="onInitialize()"
	creationComplete="onCreationComplete()">
	


	<mx:states>
		<mx:State name="Initial">
			<mx:SetProperty target="{login}" name="visible" value="true" />						
			<mx:SetProperty target="{main}" name="visible" value="false" />

		</mx:State>
		<mx:State name="Main">
			<mx:SetProperty target="{login}" name="visible" value="false" />
			<mx:SetProperty target="{login}" name="activate" value="false" />
			
			<mx:SetProperty target="{main}" name="visible" value="true" />			
			<mx:SetProperty target="{main}" name="activate" value="true" />
		
		</mx:State>
		<mx:State name="Shutdown">
			<mx:SetProperty target="{main}" name="visible" value="false" />
			<mx:SetProperty target="{login}" name="visible" value="false" />
			
			<mx:SetProperty target="{shutdown}" name="visible" value="true" />
			<mx:SetProperty target="{shutdown}" name="activate" value="true" />
			
		</mx:State>
	</mx:states>

	
	<mx:Style source="resources/style/Delaware.css" />
	
	
	<mx:Script>
		<![CDATA[
			import lenz.main.study_mgr.StudyManagerLenz;
			import base.lenz.BaseLenz;
			import app.config.AppContext;
			import base.services.LenzServiceHelper;
			import base.services.LenzService;
			import base.event.AppModeEvent;
			import app.App;
			import mx.managers.PopUpManager;
			import app.Init;
			import lenz.main.study_mgr.controller.StudyClickManager;
			import mx.controls.Alert;
			import mx.core.Application;
			
			

			private var init:Init;

			

			public var lenzServer:LenzService = null;

			
			private function onCreationComplete():void {	

					
				RegisterExternalInterfaces();
				
				addEventListener(AppModeEvent.MODE_CHANGE, onAppModeEvent);
				
				init.phase2();
				
				
			}
			
			public function RegisterExternalInterfaces():void
            {                        	 
            	                      
            	 if (ExternalInterface.available) 
            	 {
                    ExternalInterface.addCallback("callHostContainer", callHostContainer);
                    
                 }  
                 else 
                 {
                 	Alert.show('not inited');
                    // Handle failure here
                 }
          	}

            public function callHostContainer( actionName:String, targetId:String, actionParams:String ):void
            {
            	
            //	Alert.show("callHostContainer()");
 				//we need to figure out which Lenz is currently active and let that lenz handle the click
				 
				var currentLenzId:String = main.getCurrentLenz().getLenzId(); 
	
				if (currentLenzId == App.STUDY_MANAGER) {
					
					main.getCurrentLenz().getClickManager().processAction( {"currentLenzId":currentLenzId,"actionName":actionName,"targetId":targetId,"actionParams":actionParams} );
					
//	 				var clickMgr:StudyClickManager = new StudyClickManager();
//	 				clickMgr.processAction( 
 				}
 				
            }
			
			private function onInitialize():void {

				
				var config:Object = { svcUrl: "http://127.0.0.1:8080", 
						wsdlPath: "/LenzServer/services/CCISOAP?wsdl", 
						portPath: "/LenzServer/services/CCISOAP", 
//						testMode: false};
						testMode: true};


				// we have to get the loaderInfo from a display object.  Application doesn't cut it.
				var overrideConfig:Object = null;

				
				if (overrideConfig != null) {
					if (overrideConfig['testMode'] != null) {
						if (overrideConfig.testMode == "true") {
							config.testMode = true;
						} else {
							config.testMode = false;
						} 
					}
					
					if (overrideConfig['svcUrl'] != null) {
						config.svcUrl = overrideConfig.svcUrl;
					}
				}
				//initializeFont();

				init = new Init( config);
				

			}
			
			private function initializeFont():void{
				[Embed(source="resources/style/interstate.ttf",fontName="interstate")]
				var font:Class;
				Font.registerFont(font);
				StyleManager.getStyleDeclaration("global").setStyle("fontFamily","interstate");
			}
			
			// There are three top-level states for the app:
			// 1. Initial - primarily this is where login occurs
			// 2. Main - this is where all the business logic, etc. occurs
			// 3. Shutdown - this is the "goodbye" screen
			

			private function onAppModeEvent(appEvent:AppModeEvent):void {
				
				
				
				if (appEvent.subMode == AppModeEvent.LOGIN_SUCCESS) {
					
					currentState = 'Main';
					// ModalWait.stop();										
					
				}
				
			}
			
		]]>
	</mx:Script>

	<app.frame:LoginLenzFrame    visible="false" id="login"  frameThickness="45" 
		height="100%" width="100%" >
		
	</app.frame:LoginLenzFrame>
		
	<app.frame:MainLenzFrame    visible="false" id="main"  frameThickness="45" 
		height="100%" width="100%" />
	
	<app.frame:ShutdownLenzFrame    visible="false" id="shutdown"   frameThickness="45" 
		height="100%" width="100%"/>


	
</mx:Application>
