package base.lenz
{
	import app.App;
	import base.Context;
	import base.lenz.frame.LenzFrame; 
	import flash.events.Event;
	import base.event.LenzInitializedEvent;
	import base.lenz.Lenz;
	import flash.display.DisplayObject;
	import base.lenz.panel.LenzPanel;
	import base.log.Logger;
	import mx.core.Application;
	import base.event.PanelReadyEvent;
	import base.event.LenzClosedEvent;
	import flash.utils.Timer;
	import flash.events.TimerEvent;
	import mx.controls.Alert;
	import base.controller.ClickManager;
	import base.util.BreadcrumbStack;
	import flash.display.Bitmap;
	import mx.controls.Image;
	
	public class BaseLenz  implements Lenz
	{
		
		protected var globalContext:Context = null;
		protected var visualContext:Context = null;
		
		protected var lenzFrame:LenzFrame = null;
		
		protected var currentPanel:LenzPanel = null;
		
		private var constructed:Boolean = false;
		
		
		private var breadcrumbStack:BreadcrumbStack = new BreadcrumbStack();
		
		
		protected var logger:Logger = Logger.getLogger('BaseLenz');
		
		
		public function BaseLenz():void {

		}
		
		//HB ----------------
		public function getCurrentPanel():LenzPanel {
			return currentPanel;
		}		
		
		
		
		public function newPanel(panel:Class):void {
			
			//logger.debug("newPanel()");
			
			close();
			
			
			currentPanel = new panel();
			
		}
		
		
		public function getGlobalContext():Context {
			if(!globalContext) {
				return App.getContext();
			}
			return globalContext;
		}
		
		
		public function setGlobalContext( ctx:Context):void {
			
			globalContext = ctx;
			
		}
		
		
		public function getVisualContext():Context {
			if(!visualContext ) {
				return getGlobalContext();
			}
			return visualContext;
		}
		
		
		public function setVisualContext(ctx: Context):void {
			visualContext = ctx;
		}

		public function setLenzFrame( lf:LenzFrame):void {
			lenzFrame = lf;				
		}

		public function close():void {
			if (null != currentPanel){
				currentPanel.close();
			}
			lenzFrame.schedule(sendCloseEvent, 500, null);
			
		}
		
		public function activate():void {
			
			//logger.debug("Activating current panel: "+currentPanel.getTitle());
			
			if (currentPanel == null) {
				throw new Error("Lenz did not specify currentPanel, cannot activate it.  Suggest specifying currentPanel in creationComplete()");
			} else {

				currentPanel.activate();				
			
			}
		}

		public function initialize():void {
			
			//logger.debug("BaseLenz: "+this.getLenzId()+" initialized: "+constructed+" lenzFrame: "+lenzFrame);
			
			if (constructed && lenzFrame != null) {				
				// send out LenzInitializedEvent, so the frame can move forward to the next step.
				
				var ev:Event = new LenzInitializedEvent(this.getLenzId());
				
				//logger.debug("BaseLenz: dispatching "+ev.type+" :  "+this.getLenzId());
				
				lenzFrame.dispatchEvent(ev);
				
			}
			
		}


		
		
				
		public function getLenzId():String {
			throw new Error("getLenzId must be subclassed");
		}
		


		public function onPanelReadyEvent( ev:PanelReadyEvent):void {
			

			//logger.debug("PanelReadyEvent.");
			
			currentPanel.open();
			
		}





		// subclasses should call this at the end of their constructor
		protected function lenzCreationComplete():void {
			
			//logger.debug("BaseLenz: lenzCreationComplete()");
			
			constructed = true;
			
			
			// @SMELL - this shouldn't be called "initialize" if it is done at CreateComplete time.
			initialize();
		}
		
		
		
		protected function setPanel( lp:LenzPanel):void {
			currentPanel = lp;
			lenzFrame.setPanel( currentPanel );  // this tells the frame which panel to put into the main area.
		}
		
		
		
		
		private function sendCloseEvent(pEv:Event):void {
			
			//logger.debug("BaseLenz: sendCloseEvent()");
			
			var ev:Event = new LenzClosedEvent(getLenzId());
			
			lenzFrame.dispatchEvent(ev);
			
		}
		
		private function onPanelClose(ev:LenzClosedEvent):void{
			
			//logger.debug("BaseLenz: onPanelClose()");
			
			lenzFrame.setPanel( currentPanel );
		}
		
		
		
		public function fetchInitialData( handler:Function ):void {
			Alert.show("fetchInitialData must be overridden by subclass, in this case "+getLenzId());
		}
		
		
		public function getNotificationClickHandler():Function {
			Alert.show("getNotificationClickHandler must be overridden by subclass, in this case: "+getLenzId());
			return(null);
		}
		
		
		public function getClickManager():ClickManager {
			Alert.show("getClickManager must be overridden by subclass, in this case: "+getLenzId());
			return(null);
		}
		
		
		public function getLenzBreadcrumbStack():BreadcrumbStack {
			
			return breadcrumbStack;
			
		}
		
		public function getCover():Image { return null; }
		
		
		
	}
}