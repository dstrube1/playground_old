package app
{
	import app.config.LenzFactory;
	import app.server.LenzServer;
	import app.server.mock.MockLenzService;
	import app.server.mock.impl.MockGetViewService;
	
	import base.lenz.panel.PanelBuilder;
	import base.log.LogWindow;
	import base.log.Logger;
	import base.services.LenzService;
	import base.services.RichLenzService;
	import base.services.ServiceBuilder;
	import base.services.SimpleLenzService;
	
	import lenz.login.LoginLenz;
	
	import mx.core.ClassFactory;
	import app.server.mock.impl.MockGetStudyOverviewService;

	
	public class Init
	{
		
		private var config:Object = null;

		
		
		
		public function Init( logWin:LogWindow, configParams:Object):void {
			
			config = configParams;
			
			// all the configuration for the base code goes here, or in sub methods of this.
			initLogger(logWin);
			
			registerLenzes();
			
			configPanelBuilder();
						
		}
			
		
		private function initLogger(logWin:LogWindow):void {
							
			Logger.initialize(logWin.getTextArea()); 
			
		}
		
		
		private function registerLenzes():void {
			
			LenzFactory.registerLenz( LoginLenz.LENZ_ID, LoginLenz);
			
			
		}
			
		
		private function configPanelBuilder():void {
			
			PanelBuilder.setContentHeight(App.LENZ_PANEL_CONTENT_HEIGHT);
			
		}
		
		
		
		
		private function configureServer( config:Object ):void {
			
			var url:String = config["svcUrl"];
			var wsdlPath:String = config["wsdlPath"];
			var portPath:String = config["portPath"];

			var baseService:LenzService = null;			
			var visibleService:LenzService = null;

			if (config["testMode"]) {

				baseService = new MockLenzService();


			var plansXML:XML = <db>
								<plan id="1" name="Plan1" description="Hold a Rejuvenation Meeting" />
								<plan id="2" name="Plan2" description="Add more monitors" />
							</db>

				
				var getViewSvc:MockGetViewService = (baseService as MockLenzService).getResourceHandler("getView") as MockGetViewService;
			
				setGetViewMockResponses(getViewSvc, null, null, plansXML);
				
				
				var getStudyOverviewSvc:MockGetStudyOverviewService = (baseService as MockLenzService).getResourceHandler("getStudyOverview") as MockGetStudyOverviewService;
				setGetStudyOverviewMockResponses(  getStudyOverviewSvc, null );
				
				
			} else {
				
				var builder:ServiceBuilder = new ServiceBuilder();
				
				builder.setUrl(url);
				builder.setWsdlPath(wsdlPath);
				builder.setPortPath(portPath);
				baseService = new SimpleLenzService();
				
				builder.build( baseService );
				
				
			}
			
			
			visibleService = new RichLenzService(baseService );
			
			LenzServer.init(visibleService);
						
			
		}
		
		/* private function setGetViewMockResponses(getViewSvc:MockGetViewService, notificationXML:XML, notifDetailsXML:XML, plansXML:XML):void {			
		}
		
		
		private function setGetStudyOverviewMockResponses( svc:MockGetStudyOverviewService, notificationXML:XML):void {
			
		} */
		
	}
}