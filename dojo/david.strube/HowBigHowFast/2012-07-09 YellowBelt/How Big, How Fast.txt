1- 
Roughly this many binary digits (bit) are required for the unsigned representation of:
1,000 			= 10 (2^x = 1,024)
1,000,000 		= 20 (2^x = 1,048,576)
1,000,000,000 		= 30 (2^x = 1,073,741,824)
1,000,000,000,000 	= 40 (2^x = 1,099,511,627,776)
8,000,000,000,000 	= 43 (2^x = 8,796,093,022,208)

2-
20K residences
Let's say each residence has 1 resident.
They all have 
names whose length is less than or equal to John Jacob Jingleheimer Schmidt (31 chars),
addresses whose length is less than or equal to 123456 Happy Town Ln, Apt 12345, Happy Town, GA 31415 (53 chars),
& phone numbers like 770.770.7770 (12 chars)
32+54+12 characters (with delimiter between each field) = 98 characters * 20k = 1,960,000 characters
31+53+12 characters (without delimiter between each field) = 96 characters * 20k = 1,920,000 characters

3-
1,000,000 integers in a binary tree
1 node 		= 1 level, 2^0 				= 2^1 - 1
3 nodes 	= 2 levels, 2^0 + 2^1 			= 2^2 - 1
7 nodes 	= 3 levels, 2^0 + 2^1 + 2^2 		= 2^3 - 1
15 nodes 	= 4 levels, 2^0 + 2^1 + 2^2 + 2^3 	= 2^4 - 1
...
1,048,575 nodes = 20 levels, ...			= 2^20 - 1
The range of integer values that can be stored in 32 bits is 0 through 4,294,967,295. (http://en.wikipedia.org/wiki/32-bit)
We won't be needing that much.
20 bits (or about 3 bytes) should be enough.

4-
My copy of Meyer’s Object Oriented Software Construction has about 1,200 body pages. Assuming no flow control or protocol overhead, about how long would it take to send it over an async 56k baud modem line?
According to http://searchstorage.techtarget.com/definition/How-many-bytes-for
a type written page is 2KB = 16 kb
1200 pages = 2400 KB = 19200kb
According to http://tldp.org/HOWTO/Modem-HOWTO-23.html
203.2k (4 x 53.3k) is possible for 56k [baud] modems.
At that rate, 19200 kb at 203.2 kb / s would take approximately 94.5 seconds, or about a minute and a half. This is best case scenario. 
Worst case scenario, 19200 kb at 56 kb/s = 342.9 seconds, or about 5 minutes & 43 seconds.

5-
My binary search algorithm takes about 4.5mS to search a 10,000 entry array, and about 6mS to search 100,000 elements. How long would I expect it to take to search 10,000,000 elements (assuming I have sufficient memory to prevent paging).
10,000 elements = 14 comparisons max (2^14 = 16,384)
4.5 / 14 = 0.32 ms per comparison. 
100,000 = 17 comparisons max (2^17 = 131,072)
6 / 17 = 0.35 ms. 
10,000,000 = 24 comparisons max (2^24 = 16,777,216)
24 * 0.35 = 8.4 ms

6-
Unix passwords are stored using a one-way hash function: the original string is converted to the ‘encrypted’ password string, which cannot be converted back to the original string. One way to attack the password file is to generate all possible cleartext passwords, applying the password hash to each in turn and checking to see if the result matches the password you’re trying to crack. If the hashes match, then the string you used to generate the hash is the original password (or at least, it’s as good as the original password as far as logging in is concerned). In our particular system, passwords can be up to 16 characters long, and there are 96 possible characters at each position. If it takes 1mS to generate the password hash, is this a viable approach to attacking a password?

96^16 possible passwords which is close to 100^16 = 10^32. Since we check 10^3 passwords per second we need 10^29 seconds which is 10^21 years. This is not a viable approach for anyone wanting a password cracked within their lifetime of approximately 10^2 years without considerable parallel processing or cryogenics. 

96^16 = 52040292466647269602037015248896
60 * 60 * 24 * 365.25 = 31557600 seconds per year


http://codekata.pragprog.com/2007/01/kata_three_how_.html
http://www.ghacks.net/2012/04/07/how-secure-is-your-password/