How Big?

- How many digits to represent:
    - 1,000: 10 (2^10)
    - 1,000,000: 20 (2^20)
    - 1,000,000,000: 30 (2^30)
    - 1,000,000,000,000: 40 (2^40)
    - 8,000,000,000,000: 43 (2^43)
- How much space to store contact info for 20k residences?
    - Name = 100 characters
    - Address = 190 characters (to make amount come out even)
    - Phone = 10 characters
    - (100 + 190 + 10) X 20000 = 6,000,000 characters (bytes) or just under 6 MB
    - If Unicode, somewhat more (not necessarily double, depending on encoding)
- How many nodes in a binary tree of 1,000,000 integers
    - Expect 1,000,000 nodes
    - Expect 19 or more levels (2^19 + 2^18 + ... + 2)
        - If tree isn't balanced one side will be deeper
        - On 32-bit, one integer = 4 bytes
        - Assume each node = integer + two 32-bit pointers = 12 bytes
        - 12 * 1,000,000 = 12,000,000 bytes or 11+ MB

How Fast?
    - How long to send Meyer book over 56k modem?
        - 100 characters per line, 100 lines per page = 10,000 characters per page
        - 10,000 cpp X 1,200 pages = 12,000,000 characters
        - 56k = 56,000 bits/sec = 56,000 / 1,024 bytes/sec = 7,000 bytes/sec
        - 12,000,000 chars / 7,000 chars/sec = ~1700 seconds = 28 minutes
        - If compressed by 50%, then 14 minutes
    - How long to binary search 10,000,000 elements?
        - 10,000 entries = 14 levels
        - 4.5ms / 14 levels = 0.32ms/level
        - 100,000 entries = 17 levels
        - 6ms / 17 levels = 0.35ms/level
        - 10,000,000 entries = 24 levels
        - 24 * (0.32 + 0.35 / 2) = ~8ms
    - Password hashing
        - 96^16 = 5.2e+31 = 5.2e+28 seconds = a bunch of years
        - Not viable as described... however, average password might only be 8 characters long
        - Still would take 200,000+ years
        - Don't assume random distribution of password characters - i.e., use a dictionary and
          hope the passwords aren't salted