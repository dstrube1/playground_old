// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestProject1.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FizzBuzz Divisible by")]
    public partial class FizzBuzzDivisibleByFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DivisibleBy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FizzBuzz Divisible by", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("100 integers print 100 lines")]
        public virtual void _100IntegersPrint100Lines()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("100 integers print 100 lines", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("I have 100 integers");
#line 5
 testRunner.When("I fizzbuzz");
#line 6
 testRunner.Then("the result should have 100 lines");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("fizz prints correctly for divisible by 3")]
        public virtual void FizzPrintsCorrectlyForDivisibleBy3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("fizz prints correctly for divisible by 3", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have 100 integers");
#line 10
 testRunner.When("I fizzbuzz");
#line 11
 testRunner.And("get all numbers divisible by 3");
#line 12
 testRunner.But("not divisible by 5");
#line 13
 testRunner.And("not contains a 5");
#line 14
 testRunner.Then("each should be fizz");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("buzz prints correctly for divisible by 5")]
        public virtual void BuzzPrintsCorrectlyForDivisibleBy5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("buzz prints correctly for divisible by 5", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I have 100 integers");
#line 19
 testRunner.When("I fizzbuzz");
#line 20
 testRunner.And("get all numbers divisible by 5");
#line 21
 testRunner.But("not divisible by 3");
#line 22
 testRunner.And("not contains a 3");
#line 23
 testRunner.Then("each should be buzz");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("fizzbuzz prints correctly for divisible by 3 and 5")]
        public virtual void FizzbuzzPrintsCorrectlyForDivisibleBy3And5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("fizzbuzz prints correctly for divisible by 3 and 5", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have 100 integers");
#line 27
 testRunner.When("I fizzbuzz");
#line 28
 testRunner.And("get all numbers divisible by 5");
#line 29
 testRunner.And("get all numbers divisible by 3");
#line 30
 testRunner.Then("each should be fizzbuzz");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("the number prints correctly for non divisible by 3 and 5")]
        public virtual void TheNumberPrintsCorrectlyForNonDivisibleBy3And5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the number prints correctly for non divisible by 3 and 5", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I have 100 integers");
#line 34
 testRunner.When("I fizzbuzz");
#line 35
 testRunner.And("not divisible by 3");
#line 36
 testRunner.And("not divisible by 5");
#line 37
 testRunner.But("not contains a 3");
#line 38
 testRunner.And("not contains a 5");
#line 39
 testRunner.Then("each should be the index");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
